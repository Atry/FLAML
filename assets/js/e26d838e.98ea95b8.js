"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6639],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6450:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_label:"code_utils",title:"autogen.code_utils"},l=void 0,o={unversionedId:"reference/autogen/code_utils",id:"reference/autogen/code_utils",isDocsHomePage:!1,title:"autogen.code_utils",description:"generate\\_assertions",source:"@site/docs/reference/autogen/code_utils.md",sourceDirName:"reference/autogen",slug:"/reference/autogen/code_utils",permalink:"/FLAML/docs/reference/autogen/code_utils",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/autogen/code_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"code_utils",title:"autogen.code_utils"},sidebar:"referenceSideBar",previous:{title:"completion",permalink:"/FLAML/docs/reference/autogen/oai/completion"},next:{title:"math_utils",permalink:"/FLAML/docs/reference/autogen/math_utils"}},s=[{value:"generate_assertions",id:"generate_assertions",children:[],level:4},{value:"success_metrics",id:"success_metrics",children:[],level:4},{value:"implement",id:"implement",children:[],level:4}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"generate_assertions"},"generate","_","assertions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def generate_assertions(definition: str, model: Optional[str] = "gpt-3.5-turbo") -> Tuple[str, float]\n')),(0,i.kt)("p",null,"Generate assertions for a function."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"definition")," ",(0,i.kt)("em",{parentName:"li"},"str")," - The function definition, including the signature and docstr."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"model")," ",(0,i.kt)("em",{parentName:"li"},"str")," - The model used for generation.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str")," - The generated assertions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," - The cost of the generation.")),(0,i.kt)("h4",{id:"success_metrics"},"success","_","metrics"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def success_metrics(responses: List[str], definition: str, test: Optional[str] = None, entry_point: Optional[str] = None, assertions: Optional[Union[str, Callable[[str], Tuple[str, float]]]] = None) -> Dict\n")),(0,i.kt)("p",null,"Check if the task is successful."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"responses")," ",(0,i.kt)("em",{parentName:"li"},"list")," - The list of responses."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"definition")," ",(0,i.kt)("em",{parentName:"li"},"str")," - The input definition."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str")," - The test code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entry_point")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str")," - The name of the function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"assertions")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str or Callable")," - The assertion code which serves as a filter of the responses, or an assertion generator.\nWhen provided, only the responses that pass the assertions will be considered for the actual test (if provided).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dict")," - The success metrics.")),(0,i.kt)("h4",{id:"implement"},"implement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def implement(definition: str, configs: List[Dict], assertions: Optional[\n        Union[str, Callable[[str], Tuple[str, float]]]\n    ] = generate_assertions) -> Tuple[str, float]\n")),(0,i.kt)("p",null,"Implement a function."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"definition")," ",(0,i.kt)("em",{parentName:"li"},"str")," - The function definition, including the signature and docstr."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"configs")," ",(0,i.kt)("em",{parentName:"li"},"list")," - The list of configurations for completion."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"assertions")," ",(0,i.kt)("em",{parentName:"li"},"Optional, str or Callable")," - The assertion code which serves as a filter of the responses, or an assertion generator.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str")," - The implementation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")," - The cost of the implementation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int")," - The index of the configuration which generates the implementation.")))}u.isMDXComponent=!0}}]);