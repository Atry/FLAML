"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,g=u["".concat(s,".").concat(d)]||u[d]||p[d]||i;return n?a.createElement(g,o(o({ref:t},m),{},{components:n})):a.createElement(g,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1552:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"agent",title:"autogen.agent.agent"},o=void 0,l={unversionedId:"reference/autogen/agent/agent",id:"reference/autogen/agent/agent",isDocsHomePage:!1,title:"autogen.agent.agent",description:"Agent Objects",source:"@site/docs/reference/autogen/agent/agent.md",sourceDirName:"reference/autogen/agent",slug:"/reference/autogen/agent/agent",permalink:"/FLAML/docs/reference/autogen/agent/agent",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/autogen/agent/agent.md",tags:[],version:"current",frontMatter:{sidebar_label:"agent",title:"autogen.agent.agent"},sidebar:"referenceSideBar",next:{title:"assistant_agent",permalink:"/FLAML/docs/reference/autogen/agent/assistant_agent"}},s=[{value:"Agent Objects",id:"agent-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"name",id:"name",children:[],level:4},{value:"oai_conversations",id:"oai_conversations",children:[],level:4},{value:"send",id:"send",children:[],level:4},{value:"receive",id:"receive",children:[],level:4},{value:"reset",id:"reset",children:[],level:4}],level:2}],c={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"agent-objects"},"Agent Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Agent()\n")),(0,r.kt)("p",null,"(Experimental) An abstract class for AI agent.\nAn agent can communicate with other agents and perform actions.\nDifferent agents can differ in what actions they perform in the ",(0,r.kt)("inlineCode",{parentName:"p"},"receive")," method."),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(name: str, system_message: Optional[str] = "", is_termination_msg: Optional[Callable[[Dict], bool]] = None, **config, ,)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," ",(0,r.kt)("em",{parentName:"li"},"str")," - name of the agent"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"system_message")," ",(0,r.kt)("em",{parentName:"li"},"str")," - system message to be sent to the agent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is_termination_msg")," ",(0,r.kt)("em",{parentName:"li"},"function"),' - a function that takes a message in the form of a dictionary\nand returns a boolean value indicating if this received message is a termination message.\nThe dict can contain the following keys: "content", "role", "name", "function_call".')),(0,r.kt)("h4",{id:"name"},"name"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef name()\n")),(0,r.kt)("p",null,"Get the name of the agent."),(0,r.kt)("h4",{id:"oai_conversations"},"oai","_","conversations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef oai_conversations() -> Dict[str, List[Dict]]\n")),(0,r.kt)("p",null,"a dictionary of conversations from name to list of oai messages"),(0,r.kt)("h4",{id:"send"},"send"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def send(message: Union[Dict, str], recipient)\n")),(0,r.kt)("p",null,"Send a message to another agent."),(0,r.kt)("h4",{id:"receive"},"receive"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def receive(message: Union[Dict, str], sender: "Agent")\n')),(0,r.kt)("p",null,"Receive a message from another agent.\nThis method is called by the sender.\nIt needs to be overriden by the subclass to perform followup actions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message")," ",(0,r.kt)("em",{parentName:"li"},"dict or str")," - message from the sender. If the type is dict, it may contain the following reserved fields (All fields are optional).",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},'"content": content of the message, can be None.'),(0,r.kt)("li",{parentName:"ol"},'"function_call": a dictionary containing the function name and arguments.'),(0,r.kt)("li",{parentName:"ol"},'"role": role of the message, can be "assistant", "user", "function".\nThis field is only needed to distinguish between "function" or "assistant"/"user".'),(0,r.kt)("li",{parentName:"ol"},'"name": In most cases, this field is not needed. When the role is "function", this field is needed to indicate the function name.'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sender")," - sender of an Agent instance.")),(0,r.kt)("h4",{id:"reset"},"reset"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def reset()\n")),(0,r.kt)("p",null,"Reset the agent."))}m.isMDXComponent=!0}}]);